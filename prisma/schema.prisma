// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  PROJEKTLEITER
  MITARBEITER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(MITARBEITER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  briefings     Briefing[]
  auditLogs     AuditLog[]

  @@map("users")
}

enum ProjectStatus {
  ENTWURF
  AKTIV
  ARCHIVIERT
}

model Project {
  id             String        @id @default(cuid())
  title          String
  location       String
  isOutdoor      Boolean       @default(false)
  buildUpStart   DateTime
  buildUpEnd     DateTime
  eventStart     DateTime
  eventEnd       DateTime
  description    String?       @db.Text
  createdByUserId String
  status         ProjectStatus @default(ENTWURF)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Wizard-Fragen
  hasElectricity    Boolean @default(false)
  hasGenerator      Boolean @default(false)
  hasHazardousMaterials Boolean @default(false)
  hasWorkAbove2m    Boolean @default(false)
  hasPublicAccess   Boolean @default(false)
  hasNightWork      Boolean @default(false)
  hasTrafficArea    Boolean @default(false)

  createdBy       User            @relation(fields: [createdByUserId], references: [id])
  projectHazards  ProjectHazard[]
  participants    Participant[]
  briefings       Briefing[]
  attachments     Attachment[]
  auditLogs       AuditLog[]

  @@map("projects")
}

enum HazardCategory {
  ELEKTRIK
  RIGGING
  PYROTECHNIK
  WETTER
  VERKEHR
  LAERM
  HOEHE
  CHEMISCH
  MECHANISCH
  BRAND
  SONSTIGE
}

model Hazard {
  id                String         @id @default(cuid())
  title             String
  description       String         @db.Text
  category          HazardCategory
  defaultLikelihood Int            @default(3) // 1-5
  defaultSeverity   Int            @default(3) // 1-5
  legalRefs         String?        @db.Text
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  controlMeasures ControlMeasure[]
  projectHazards  ProjectHazard[]

  @@map("hazards")
}

enum ControlType {
  TECHNISCH
  ORGANISATORISCH
  PPE
}

model ControlMeasure {
  id          String      @id @default(cuid())
  hazardId    String
  description String      @db.Text
  type        ControlType
  mandatory   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  hazard Hazard @relation(fields: [hazardId], references: [id], onDelete: Cascade)

  @@map("control_measures")
}

model ProjectHazard {
  id           String  @id @default(cuid())
  projectId    String
  hazardId     String
  likelihood   Int     @default(3) // 1-5
  severity     Int     @default(3) // 1-5
  residualRisk Int     @default(9) // berechnet
  selected     Boolean @default(true)
  notes        String? @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  hazard  Hazard  @relation(fields: [hazardId], references: [id])

  @@unique([projectId, hazardId])
  @@map("project_hazards")
}

model Participant {
  id              String    @id @default(cuid())
  projectId       String
  firstName       String
  lastName        String
  email           String?
  company         String?
  role            String?
  importedFromCsv Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  signatures Signature[]

  @@map("participants")
}

model Briefing {
  id          String   @id @default(cuid())
  projectId   String
  date        DateTime @default(now())
  trainerUserId String
  summary     String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  project    Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  trainer    User        @relation(fields: [trainerUserId], references: [id])
  signatures Signature[]

  @@map("briefings")
}

model Signature {
  id            String    @id @default(cuid())
  participantId String
  briefingId    String
  imageUrl      String?   // Base64 oder Pfad
  signedAt      DateTime  @default(now())
  physicalSigned Boolean  @default(false)

  participant Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  briefing    Briefing    @relation(fields: [briefingId], references: [id], onDelete: Cascade)

  @@unique([participantId, briefingId])
  @@map("signatures")
}

model Attachment {
  id        String   @id @default(cuid())
  projectId String
  fileName  String
  fileUrl   String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  projectId String?
  action    String
  entity    String
  entityId  String?
  timestamp DateTime @default(now())
  details   Json?

  user User? @relation(fields: [userId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])

  @@map("audit_logs")
}